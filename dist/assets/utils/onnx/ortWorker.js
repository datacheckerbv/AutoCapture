let ortSession=null,inputName=null;const normalizeMeanStd=e=>ort.Tensor.fromImage(e,{dataType:"float32",tensorFormat:"RGB",norm:{bias:-128,mean:127.5}}),normalizeRescale=e=>ort.Tensor.fromImage(e,{dataType:"float32",tensorFormat:"RGB",norm:{bias:0,mean:255}});self.onmessage=async e=>{const{type:a,payload:t}=e.data||{};try{if("init"===a)importScripts(t.ortScriptUrl),t.wasmPaths&&(ort.env.wasm.wasmPaths=t.wasmPaths),ort.env.wasm.numThreads=1,ort.env.wasm.simd=!0,ort.env.wasm.proxy=!1,ortSession=await ort.InferenceSession.create(t.modelBuffer,{executionProviders:["wasm"],enableCpuMemArena:!1,enableMemPattern:!1,graphOptimizationLevel:"basic"}),inputName=ortSession.inputNames[0],self.postMessage({type:"ready",payload:{inputName}});else if("run"===a){if(!ortSession)throw new Error("ORT session not initialized");let e;switch(t.normalization){case"meanStd":e=await normalizeMeanStd(t.imageData);break;case"rescale":e=await normalizeRescale(t.imageData);break;default:throw new Error(`Unknown normalization: ${t.normalization}`)}const a={[inputName]:e},s=await ortSession.run(a),o={};for(const[e,a]of Object.entries(s))o[e]=Array.from(a.data);self.postMessage({type:"result",payload:o})}else"dispose"===a&&(ortSession&&await ortSession.release(),ortSession=null,inputName=null,self.postMessage({type:"disposed"}),self.close())}catch(e){self.postMessage({type:"error",payload:String(e?.stack||e)})}};